# TODO: Készítsd el a schema hiányzó részeit! A modellekhez kapcsolódó adatmezőket segítségül megadtuk.

type Query {
    # Elemi példa:
    helloWorld: String
    # Példa paraméterezésre:
    helloName(name: String!): String


    grade: Int!
    grades(count: Int!): [Int]!
    gradesFrom(percentages: [Float]!): [Int]!

    students: [Student]
    exams: [Exam]

    exam(id: ID!): Exam

    studentByNeptun(neptun: String!): Student

    closestExam: Exam

    mostBusyStudent: Student
}

type Mutation {
    createStudent(input: CreateStudentInput!): Student

    registerStudents(students: [String]!, ExamId: ID!): RegisterResult

    removePassiveStudents: [RemoveResultElement]!
}

input CreateStudentInput {
    neptun: String!
    name: String!
    birthdate: Date!
    birthplace: String!
    semester: Int!
    active: Boolean!
}

type RegisterResult {
    invalidNeptun: [String]!
    alreadyRegistered: [String]!
    justRegistered: [String]!
}

type RemoveResultElement {
    student: Student!
    removedFromExams: [Exam]!
}

interface Model {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Student implements Model {
    id: ID!
    neptun: String!
    name: String!
    birthdate: Date!
    birthplace: String!
    semester: Int!
    active: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!

    exams: [Exam]
}

type Exam implements Model {
    id: ID!
    startTime: DateTime!
    endTime: DateTime!
    location: String!
    maxStudents: Int!
    createdAt: DateTime!
    updatedAt: DateTime!

    tasks: [Task]

    studentCount: Int!
    maxScore: Float!
    perfectScore: Float!
}

type Task implements Model {
    id: ID!
    title: String!
    text: String!
    points: Float!
    extra: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
}
